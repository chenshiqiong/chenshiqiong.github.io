<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-11-07T05:07:55.732Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>csq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>if</title>
    <link href="http://yoursite.com/wiki/if/"/>
    <id>http://yoursite.com/wiki/if/</id>
    <published>2021-11-07T05:07:25.000Z</published>
    <updated>2021-11-07T05:07:55.732Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Run Keyword If</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;a&#125;    Run Keyword If    $&#123;b&#125;==2    Set Variable    （结果是）1</span><br><span class="line">...    ELSE IF    $&#123;b&#125;==3    Set Variable    （结果是）2</span><br><span class="line">...    ELSE    Set Variable    （结果是）3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">① 数字对比</span><br><span class="line">Run Keyword If    $&#123;b&#125;==2    keyword</span><br><span class="line">...    ELSE IF    $&#123;b&#125;&lt;2    keyword</span><br><span class="line">...    ELSE    keyword</span><br><span class="line"></span><br><span class="line">② 字符对比</span><br><span class="line">Run Keyword If    &quot;$&#123;b&#125;&quot;==&quot;2&quot;    keyword</span><br><span class="line">...    ELSE IF    &quot;$&#123;b&#125;&quot;==&quot;12&quot;    keyword</span><br><span class="line">...    ELSE    keyword</span><br><span class="line"></span><br><span class="line">③ 布尔类型对比</span><br><span class="line">Run Keyword If    &quot;$&#123;b&#125;&quot;==&quot;$&#123;true&#125;&quot;    keyword</span><br><span class="line">...    ELSE IF    &quot;$&#123;b&#125;&quot;==&quot;$&#123;false&#125;&quot;    keyword</span><br><span class="line">...    ELSE    keyword</span><br><span class="line"></span><br><span class="line">④ 列表包含元素(多个关键字)</span><br><span class="line">Run Keyword If    $&#123;a&#125; in @&#123;abc&#125; and &quot;$&#123;b&#125;&quot; in @&#123;anc&#125;    keyword</span><br><span class="line">...    ELSE    keyword</span><br><span class="line"></span><br><span class="line">④ 多个执行语句</span><br><span class="line">Run Keyword If    $&#123;a&#125;==1    Run Keywords    keyword    AND    keyword1</span><br></pre></td></tr></table></figure><ol start="2"><li>Run Keyword Unless</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;a&#125;    Run Keyword Unless    $&#123;b&#125;==2    Set Variable    （结果不是）1</span><br></pre></td></tr></table></figure><ol start="3"><li>Set Variable If</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;a&#125;    Set Variable If    $&#123;b&#125;==2    1    2</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;Run Keyword If&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="robotframework" scheme="http://yoursite.com/categories/robotframework/"/>
    
    
  </entry>
  
  <entry>
    <title>字典</title>
    <link href="http://yoursite.com/wiki/%E5%AD%97%E5%85%B8/"/>
    <id>http://yoursite.com/wiki/%E5%AD%97%E5%85%B8/</id>
    <published>2021-11-07T05:06:23.000Z</published>
    <updated>2021-11-07T05:06:56.780Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>创建字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&#123;dict&#125;    Create Dictionary    a=1    b=2    c=3</span><br></pre></td></tr></table></figure></li><li><p>在字典里添加键值</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*** Setting ***</span><br><span class="line">Library        Collections</span><br><span class="line"></span><br><span class="line">&amp;&#123;dict&#125;    Create Dictionary    a=1    b=2    c=3</span><br><span class="line"></span><br><span class="line">$&#123;dict&#125;    Set To Dictionary    $&#123;dict&#125;    d=4</span><br><span class="line">(Set To Dictionary    $&#123;dict&#125;    d=4)</span><br></pre></td></tr></table></figure><ol start="3"><li>在字典中移除关键字</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*** Setting ***</span><br><span class="line">Library        Collections</span><br><span class="line"></span><br><span class="line">&amp;&#123;dict&#125;    Create Dictionary    a=1    b=2    c=3</span><br><span class="line"></span><br><span class="line">Remove From Dictionary    $&#123;dict&#125;    c</span><br></pre></td></tr></table></figure><ol start="4"><li>获取字典中key的值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*** Setting ***</span><br><span class="line">Library        Collections</span><br><span class="line"></span><br><span class="line">&amp;&#123;dict&#125;    Create Dictionary    a=1    b=2    c=3</span><br><span class="line"></span><br><span class="line">$&#123;a&#125;    Get From Dictionary    $&#123;dict&#125;    a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建字典&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=</summary>
      
    
    
    
    <category term="robotframework" scheme="http://yoursite.com/categories/robotframework/"/>
    
    
  </entry>
  
  <entry>
    <title>常用关键字</title>
    <link href="http://yoursite.com/wiki/%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/wiki/%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2021-11-07T05:04:04.000Z</published>
    <updated>2021-11-07T05:05:48.755Z</updated>
    
    <content type="html"><![CDATA[<ol><li>打印</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log    helloworld</span><br></pre></td></tr></table></figure><ol start="2"><li>变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;a&#125;    Set Variable    helloworld</span><br></pre></td></tr></table></figure><ol start="3"><li>列表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&#123;a&#125;    Create List    a    b    c</span><br><span class="line">Log    $&#123;a&#125;</span><br><span class="line"></span><br><span class="line">@&#123;a&#125;    Create List    a    b    c</span><br><span class="line">Log Many    @&#123;a&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>字典</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&#123;a&#125;    Create Dictionary    a=1    b=2</span><br></pre></td></tr></table></figure><p>5. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;打印&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td clas</summary>
      
    
    
    
    <category term="robotframework" scheme="http://yoursite.com/categories/robotframework/"/>
    
    
  </entry>
  
  <entry>
    <title>json</title>
    <link href="http://yoursite.com/wiki/json/"/>
    <id>http://yoursite.com/wiki/json/</id>
    <published>2021-11-07T05:01:20.000Z</published>
    <updated>2021-11-07T05:01:57.527Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-json的介绍"><a href="#1-json的介绍" class="headerlink" title="1.json的介绍"></a>1.json的介绍</h4><p>&emsp;&emsp;JSON全称是(JavaScript Object Notation)是一种轻量级的数据格式。Python标准库中的json模块提供了JSON数据的处理功能。<br>&emsp;&emsp;json模块常用的四个方法： dumps、dump、loads、load</p><h4 id="2-dumps"><a href="#2-dumps" class="headerlink" title="2.dumps"></a>2.dumps</h4><p>&emsp;&emsp;json.dumps方法可以将Python对象（即字典）转换为一个表示JONS数据的字符串.<br>&emsp;&emsp;在默认实现中, json.dumps可以处理的Python对象, 及其所有的属性值, 类型必须为dict, list, tuple, str, float或者int<br>&emsp;&emsp;它的完整接口签名如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj：要转换的数据对象</span><br><span class="line">ensure_ascii：用来控制生成的JSON字符串的编码；默认为True, 此时, 所有的非ASCII码字条都会转义. False会保持原有编码, 限UTF-8</span><br><span class="line">check_circular：检查Python对象中是否有循环引用, 如果发现了循环引用, 就会抛出异常</span><br><span class="line">indent：用来控制JSON字符串的换行和缩进效果；①为0或者负数时, JSON字符会包含换行；②为正整数时, 除了换行, JSON还会以指定数量的空格为单位在对象层次间进行缩进；③是str, 此时, JSON会以str内容为单位进行缩进, 比如制表符\t</span><br></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">print(json.dumps(1))</span><br><span class="line">print(type(json.dumps(1)))</span><br><span class="line">print(json.dumps(&quot;1&quot;))</span><br><span class="line">print(type(json.dumps(&quot;1&quot;)))</span><br><span class="line">print(json.dumps(&quot;中文&quot;))</span><br><span class="line">print(type(json.dumps(&quot;中文&quot;)))</span><br><span class="line"></span><br><span class="line">dict = &#123;&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:23,&apos;b&apos;: &#123;&apos;x&apos;: 321, &apos;y&apos;: &apos;ABC&apos;&#125;&#125;</span><br><span class="line">print(json.dumps(dict))</span><br><span class="line">print(type(json.dumps(dict)))</span><br><span class="line">print(json.dumps(dict,indent=-1))</span><br><span class="line">print(json.dumps(dict,indent=4))</span><br><span class="line">print(json.dumps(dict,indent=&apos;\t&apos;))</span><br></pre></td></tr></table></figure><p>返回执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&quot;1&quot;</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&quot;\u4e2d\u6587&quot;</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 23, &quot;b&quot;: &#123;&quot;x&quot;: 321, &quot;y&quot;: &quot;ABC&quot;&#125;&#125;</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Tom&quot;,</span><br><span class="line">&quot;age&quot;: 23,</span><br><span class="line">&quot;b&quot;: &#123;</span><br><span class="line">&quot;x&quot;: 321,</span><br><span class="line">&quot;y&quot;: &quot;ABC&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;Tom&quot;,</span><br><span class="line">    &quot;age&quot;: 23,</span><br><span class="line">    &quot;b&quot;: &#123;</span><br><span class="line">        &quot;x&quot;: 321,</span><br><span class="line">        &quot;y&quot;: &quot;ABC&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Tom&quot;,</span><br><span class="line">&quot;age&quot;: 23,</span><br><span class="line">&quot;b&quot;: &#123;</span><br><span class="line">&quot;x&quot;: 321,</span><br><span class="line">&quot;y&quot;: &quot;ABC&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-dump"><a href="#3-dump" class="headerlink" title="3.dump"></a>3.dump</h4><p>&emsp;&emsp;当JSON数据是保存在一个文件中的时候, json.load方法可以用来从这个文件中读取数据, 并转换为Python对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True,allow_nan=True,cls=None, indent=None, separators=None,default=None, sort_keys=False, **kw)</span><br></pre></td></tr></table></figure><p><strong>例如：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">with open(&apos;test.json&apos;, mode=&apos;a&apos;) as f:</span><br><span class="line">    json.dump(&#123;&apos;a&apos;:1234&#125;,f)</span><br></pre></td></tr></table></figure></p><h4 id="4-loads"><a href="#4-loads" class="headerlink" title="4.loads"></a>4.loads</h4><p>&emsp;&emsp;json.loads方法可以将包含了一个JSON数据的str, bytes或者bytearray对象, 转化为一个Python Dictionary.<br>&emsp;&emsp;它的完型接口签名如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</span><br></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">dict = &#123;&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:23,&apos;b&apos;: &#123;&apos;x&apos;: 321, &apos;y&apos;: &apos;ABC&apos;&#125;&#125;</span><br><span class="line">print(json.dumps(dict))</span><br><span class="line">print(type(json.dumps(dict)))</span><br><span class="line"></span><br><span class="line">print(json.loads(json.dumps(dict)))</span><br><span class="line">print(type(json.loads(json.dumps(dict))))</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 23, &quot;b&quot;: &#123;&quot;x&quot;: 321, &quot;y&quot;: &quot;ABC&quot;&#125;&#125;</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 23, &apos;b&apos;: &#123;&apos;x&apos;: 321, &apos;y&apos;: &apos;ABC&apos;&#125;&#125;</span><br><span class="line">&lt;class &apos;dict&apos;&gt;</span><br></pre></td></tr></table></figure><h4 id="5-load"><a href="#5-load" class="headerlink" title="5.load"></a>5.load</h4><p>&emsp;&emsp;当JSON数据是保存在一个文件中的时候, json.load方法可以用来从这个文件中读取数据, 并转换为Python对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-json的介绍&quot;&gt;&lt;a href=&quot;#1-json的介绍&quot; class=&quot;headerlink&quot; title=&quot;1.json的介绍&quot;&gt;&lt;/a&gt;1.json的介绍&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;JSON全称是(JavaScript Object Nota</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>正则基础</title>
    <link href="http://yoursite.com/wiki/%E6%AD%A3%E5%88%99%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/wiki/%E6%AD%A3%E5%88%99%E5%9F%BA%E7%A1%80/</id>
    <published>2021-11-07T05:00:13.000Z</published>
    <updated>2021-11-07T05:00:53.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-字符组-：-字符组"><a href="#1-字符组-：-字符组" class="headerlink" title="1.字符组 ： [字符组]"></a>1.字符组 ： [字符组]</h4><p>&emsp;&emsp;在同一个位置可能出现的各种字符组成了一个字符组，在正则表达式中用[]表示 字符分为很多类，比如数字、字母、标点等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 [1]               匹配1</span><br><span class="line">2 [123]　　　　　　  匹配1、2、3</span><br><span class="line">3 [0-9]　　　　　　　匹配任意一个数字</span><br><span class="line">4 [a-z]　　　　　　　匹配任意一个小写字母</span><br><span class="line">5 [A-Z]　　　　　　　匹配任意一个大写字母</span><br><span class="line">6 [A-Za-z]　　　　　 匹配任意一个字母</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(re.findall(&apos;[1]&apos;,&apos;Zll5201314&apos;))         #[&apos;1&apos;, &apos;1&apos;]</span><br><span class="line">print(re.findall(&apos;[123]&apos;,&apos;Zll5201314&apos;))       #[&apos;2&apos;, &apos;1&apos;, &apos;3&apos;, &apos;1&apos;]</span><br><span class="line">print(re.findall(&apos;[0-9]&apos;,&apos;Zll5201314&apos;))       #[&apos;5&apos;, &apos;2&apos;, &apos;0&apos;, &apos;1&apos;, &apos;3&apos;, &apos;1&apos;, &apos;4&apos;]</span><br><span class="line">print(re.findall(&apos;[a-z]&apos;,&apos;Zll5201314&apos;))       #[&apos;l&apos;, &apos;l&apos;]</span><br><span class="line">print(re.findall(&apos;[A-Z]&apos;,&apos;Zll5201314&apos;))       #[&apos;Z&apos;]</span><br><span class="line">print(re.findall(&apos;[a-zA-Z]&apos;,&apos;Zll5201314&apos;))    #[&apos;Z&apos;, &apos;l&apos;, &apos;l&apos;]</span><br><span class="line">print(re.findall(&apos;[A-Za-z0-3]&apos;,&apos;Zll5201314&apos;)) #[&apos;Z&apos;, &apos;l&apos;, &apos;l&apos;, &apos;2&apos;, &apos;0&apos;, &apos;1&apos;, &apos;3&apos;, &apos;1&apos;]</span><br></pre></td></tr></table></figure><h4 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2.元字符"></a>2.元字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.　　　 　匹配除换行符以外的任意字符</span><br><span class="line">\w　　　  匹配字母或者数字或者下划线</span><br><span class="line">\s　　　  匹配任意空白字符</span><br><span class="line">\d　　　  匹配数字</span><br><span class="line">\n　　　  匹配换行符</span><br><span class="line">\t　　　　匹配制表符tab</span><br><span class="line">\b　　　　匹配一个单词的结尾</span><br><span class="line">^　　　 　匹配字符串的开始</span><br><span class="line">$　　　 　匹配字符串的结尾</span><br><span class="line">\W　　  　匹配非字母或下划线或数字</span><br><span class="line">\D　　  　匹配非数字</span><br><span class="line">\S　  　　匹配非空白符</span><br><span class="line">|　　　 　匹配|前或者后的内容</span><br><span class="line">()　　　　匹配括号内的表达式，也表示一个组</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(re.findall(&apos;.&apos;,&apos;love_u 520&apos;))      #[&apos;l&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;u&apos;, &apos; &apos;, &apos;5&apos;, &apos;2&apos;, &apos;0&apos;]</span><br><span class="line">print(re.findall(&apos;\w&apos;,&apos;love_u 520&apos;))     #[&apos;l&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;u&apos;, &apos;5&apos;, &apos;2&apos;, &apos;0&apos;]</span><br><span class="line">print(re.findall(&apos;\s&apos;,&apos;love_u 520&apos;))     #[&apos; &apos;]</span><br><span class="line">print(re.findall(&apos;\d&apos;,&apos;love_u 520&apos;))     #[&apos;5&apos;, &apos;2&apos;, &apos;0&apos;]</span><br><span class="line">print(re.findall(&apos;\n&apos;,&apos;love_u 520&apos;))     #[]</span><br><span class="line">print(re.findall(&apos;\b&apos;,&apos;love_u 520&apos;))     #[]</span><br><span class="line">print(re.findall(&apos;^l&apos;,&apos;love_u 520&apos;))     #[&apos;l&apos;]</span><br><span class="line">print(re.findall(&apos;520$&apos;,&apos;love_u 520&apos;))   #[&apos;520&apos;]</span><br><span class="line">print(re.findall(&apos;\W&apos;,&apos;love_u 520&apos;))     #[&apos; &apos;]</span><br><span class="line">print(re.findall(&apos;\D&apos;,&apos;love_u 520&apos;))     #[&apos;l&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;u&apos;, &apos; &apos;]</span><br><span class="line">print(re.findall(&apos;\S&apos;,&apos;love_u 520&apos;))     #[&apos;l&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;u&apos;, &apos;5&apos;, &apos;2&apos;, &apos;0&apos;]</span><br><span class="line">print(re.findall(&apos;love|u&apos;,&apos;love_u 520&apos;)) #[&apos;love&apos;, &apos;u&apos;]</span><br></pre></td></tr></table></figure><h4 id="3-量词"><a href="#3-量词" class="headerlink" title="3.量词"></a>3.量词</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 *       重复零次或者多次 </span><br><span class="line">2 +　    　重复1次或者多次</span><br><span class="line">3 ?　    　重复零次或者一次</span><br><span class="line">4 &#123;n&#125;　  　重复n次</span><br><span class="line">5 &#123;n,&#125;　 　重复n次或者更多次</span><br><span class="line">6 &#123;n,m&#125;　　重复n到m次</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 print(re.findall(&apos;5*&apos;,&apos;555 5&apos;))     #[&apos;555&apos;, &apos;&apos;, &apos;5&apos;, &apos;&apos;]</span><br><span class="line">2 print(re.findall(&apos;5+&apos;,&apos;555 5&apos;))     #[&apos;555&apos;, &apos;5&apos;]</span><br><span class="line">3 print(re.findall(&apos;5?&apos;,&apos;555 5&apos;))     #[&apos;5&apos;, &apos;5&apos;, &apos;5&apos;, &apos;&apos;, &apos;5&apos;, &apos;&apos;]</span><br><span class="line">4 print(re.findall(&apos;5&#123;2,3&#125;&apos;,&apos;555 5&apos;)) #[&apos;555&apos;]</span><br><span class="line">5 print(re.findall(&apos;5&#123;2&#125;&apos;,&apos;555 5&apos;))   #[&apos;55&apos;]</span><br><span class="line">6 print(re.findall(&apos;5&#123;3&#125;&apos;,&apos;555 5&apos;))   #[&apos;555&apos;]</span><br></pre></td></tr></table></figure><h4 id="4-常见的正则表达式应用"><a href="#4-常见的正则表达式应用" class="headerlink" title="4.常见的正则表达式应用"></a>4.常见的正则表达式应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">手机号（国内）：^[1-9][3478]\d&#123;9&#125;</span><br><span class="line">电话号（国内）：[0-9-()（）]&#123;7,18&#125;</span><br><span class="line">邮         编：\d&#123;6&#125;</span><br><span class="line">Q           Q：[1-9]([0-9]&#123;5,11&#125;)</span><br><span class="line">身  份  证  号：\d&#123;17&#125;[\d|x]|\d&#123;15&#125;</span><br><span class="line">邮          箱：\w[-\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\.)+[A-Za-z]&#123;2,14&#125;</span><br><span class="line">网          址：^((https|http|ftp|rtsp|mms)?:\/\/)[^\s]+</span><br><span class="line">日          期：\d&#123;4&#125;(\-|\/|.)\d&#123;1,2&#125;\1\d&#123;1,2&#125;</span><br><span class="line">用    户    名：[A-Za-z0-9_\-\u4e00-\u9fa5]+</span><br><span class="line"></span><br><span class="line">#正则表达式在线测试网址“http://tool.chinaz.com/regex/”</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-字符组-：-字符组&quot;&gt;&lt;a href=&quot;#1-字符组-：-字符组&quot; class=&quot;headerlink&quot; title=&quot;1.字符组 ： [字符组]&quot;&gt;&lt;/a&gt;1.字符组 ： [字符组]&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在同一个位置可能出现的各种字符组成了</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>re</title>
    <link href="http://yoursite.com/wiki/re/"/>
    <id>http://yoursite.com/wiki/re/</id>
    <published>2021-11-07T04:58:53.000Z</published>
    <updated>2021-11-07T04:59:40.451Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-re简介"><a href="#1-re简介" class="headerlink" title="1.re简介"></a>1.re简介</h4><p>&emsp;&emsp;re模块是python中处理正则表达式的一个模块。<br>&emsp;&emsp;re常用方法有findall()、finditer()、search()、match()、split()、sub()、subn()、compile()</p><h4 id="2-findall-方法"><a href="#2-findall-方法" class="headerlink" title="2.findall()方法"></a>2.findall()方法</h4><p>&emsp;&emsp;findall(pattern, string, flags=0)，从字符串中找出符合模式的字符序列，返回值为list类型，list元素为匹配出的各个字符串。<br><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">a = re.findall(&apos;a&apos;,&apos;abac&apos;)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b = &quot;AbCdEf&quot;</span><br><span class="line">x = re.findall(&apos;c&apos;,b)</span><br><span class="line">y = re.findall(&apos;c&apos;, b, re.I)</span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&apos;a&apos;, &apos;a&apos;]</span><br><span class="line">[]</span><br><span class="line">[&apos;C&apos;]</span><br></pre></td></tr></table></figure><h4 id="3-finditer-方法"><a href="#3-finditer-方法" class="headerlink" title="3.finditer()方法"></a>3.finditer()方法</h4><p>&emsp;&emsp;finditer(pattern, string, flags=0),执行与findall()相同的操作，但返回一个生产器。<br><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">ret = re.finditer(&apos;\d&apos;, &apos;ds3sy4784a&apos;)   #finditer返回一个存放匹配结果的迭代器</span><br><span class="line">print(ret)  # &lt;callable_iterator object at 0x10195f940&gt;</span><br><span class="line">print(next(ret).group())  #查看第一个结果</span><br><span class="line">print(next(ret).group())  #查看第二个结果</span><br><span class="line">print([i.group() for i in ret])  #查看剩余的左右结果</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;callable_iterator object at 0x0000025B7AB82F28&gt;</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">[&apos;7&apos;, &apos;8&apos;, &apos;4&apos;]</span><br></pre></td></tr></table></figure><h4 id="4-search-方法"><a href="#4-search-方法" class="headerlink" title="4.search()方法"></a>4.search()方法</h4><p>&emsp;&emsp;search(pattern, string, flags=0)，在整个字符串中查找满足匹配条件的字符或者字符串，一旦找到一个就不再继续查找，并返回包含查找值的对象（match对象），可以用.group()方法进行查看。<br><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">a = re.search(&apos;a&apos;,&apos;Abac&apos;)</span><br><span class="line">print(a.group())</span><br><span class="line"></span><br><span class="line">b = re.search(&apos;a&apos;,&apos;Abac&apos;,re.I)</span><br><span class="line">print(b.group())</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">A</span><br></pre></td></tr></table></figure><h4 id="5-match-方法"><a href="#5-match-方法" class="headerlink" title="5.match()方法"></a>5.match()方法</h4><p>&emsp;&emsp;match(pattern, string, flags=0)，从开头位置查找是否满足匹配条件，如果没有就会返回None，如果有，则会返回一个包含查找值的对象（match对象），可以用group()方法进行查看。<br><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">a = re.match(&apos;a&apos;,&apos;Abac&apos;)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">a = re.match(&apos;a&apos;,&apos;Abac&apos;,re.I)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">None</span><br><span class="line">A</span><br></pre></td></tr></table></figure><h4 id="6-split-方法"><a href="#6-split-方法" class="headerlink" title="6.split()方法"></a>6.split()方法</h4><p>&emsp;&emsp;split(pattern,string,maxsplit=0,flags=0)，根据正则匹配分割字符串。<br><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">a = re.split(&apos;a&apos;,&apos;Abac&apos;)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Ab&apos;, &apos;c&apos;]</span><br></pre></td></tr></table></figure><h4 id="7-sub-方法"><a href="#7-sub-方法" class="headerlink" title="7.sub()方法"></a>7.sub()方法</h4><p>&emsp;&emsp;sub(pattern,repl,string,count=0,flags=0)，替换匹配成功的指定位置字符串。<br><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">a = re.sub(&apos;b&apos;,&apos;B&apos;,&apos;Abac&apos;)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b = re.sub(&apos;a&apos;,&apos;A&apos;,&apos;abac&apos;,1)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ABac</span><br><span class="line">Abac</span><br></pre></td></tr></table></figure><h4 id="8-subn-方法"><a href="#8-subn-方法" class="headerlink" title="8.subn()方法"></a>8.subn()方法</h4><p>&emsp;&emsp;subn(pattern, repl, string, count=0, flags=0),执行与sub()相同的操作，但返回一个元组（new_string， number_of_subs_made)。<br><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">a = re.subn(&apos;a&apos;,&apos;A&apos;,&apos;abac&apos;,1)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;Abac&apos;, 1)</span><br></pre></td></tr></table></figure><h4 id="9-compile-方法"><a href="#9-compile-方法" class="headerlink" title="9.compile()方法"></a>9.compile()方法</h4><p>&emsp;&emsp;compile(pattern, flags=0)，将正则表达式模式编译成一个正则表达式对象，它可以用于匹配使用它的match ()和search ()方法。<br><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">x = re.compile(&apos;a&apos;)</span><br><span class="line">a = x.search(&apos;Abac&apos;)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-re简介&quot;&gt;&lt;a href=&quot;#1-re简介&quot; class=&quot;headerlink&quot; title=&quot;1.re简介&quot;&gt;&lt;/a&gt;1.re简介&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;re模块是python中处理正则表达式的一个模块。&lt;br&gt;&amp;emsp;&amp;emsp;r</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>logging</title>
    <link href="http://yoursite.com/wiki/logging/"/>
    <id>http://yoursite.com/wiki/logging/</id>
    <published>2021-11-07T04:55:34.000Z</published>
    <updated>2021-11-07T04:56:24.295Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-logging模块简介"><a href="#1-logging模块简介" class="headerlink" title="1.logging模块简介"></a>1.logging模块简介</h4><p>&emsp;&emsp;logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等</p><h4 id="2-logging基本使用"><a href="#2-logging基本使用" class="headerlink" title="2.logging基本使用"></a>2.logging基本使用</h4><p>&emsp;&emsp;配置logging基本的设置（使用logging.basicConfig函数）：</p><ul><li>filename：指定日志文件名；</li><li>filemode：和file函数意义相同，指定日志文件的打开模式，’w’或者’a’；</li><li>datefmt：指定时间格式，同time.strftime()；</li><li>level：设置日志级别（debug、info、warning、error以及critical），默认为logging.WARNNING；</li><li>stream：指定将日志的输出流，可以指定输出到sys.stderr，sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略；</li><li>format：指定输出的格式和内容，format可以输出很多有用的信息：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- %(levelno)s：   打印日志级别的数值</span><br><span class="line">- %(levelname)s： 打印日志级别的名称</span><br><span class="line">- %(pathname)s：  打印当前执行程序的路径，其实就是sys.argv[0]</span><br><span class="line">- %(filename)s：  打印当前执行程序名</span><br><span class="line">- %(funcName)s：  打印日志的当前函数</span><br><span class="line">- %(lineno)d：    打印日志的当前行号</span><br><span class="line">- %(asctime)s：   打印日志的时间</span><br><span class="line">- %(thread)d：    打印线程ID</span><br><span class="line">- %(threadName)s：打印线程名称</span><br><span class="line">- %(process)d：   打印进程ID</span><br><span class="line">- %(message)s：   打印日志信息</span><br></pre></td></tr></table></figure></li></ul><p><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level = logging.INFO,format = &apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">logger.info(&quot;Start print log&quot;)</span><br><span class="line">logger.debug(&quot;Do something&quot;)</span><br><span class="line">logger.warning(&quot;Something maybe fail.&quot;)</span><br><span class="line">logger.info(&quot;Finish&quot;)</span><br></pre></td></tr></table></figure><p>运行后，控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-03-20 17:19:05,105 - __main__ - INFO - Start print log</span><br><span class="line">2019-03-20 17:19:05,105 - __main__ - WARNING - Something maybe fail.</span><br><span class="line">2019-03-20 17:19:05,105 - __main__ - INFO - Finish</span><br></pre></td></tr></table></figure><h4 id="3-将日志写入文件"><a href="#3-将日志写入文件" class="headerlink" title="3.将日志写入文件"></a>3.将日志写入文件</h4><p>&emsp;&emsp;logging中包含的handler主要有如下几种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- AddHandler:          logger.addHandler;添加处理方式</span><br><span class="line">- StreamHandler：      logging.StreamHandler；日志输出到流，可以是sys.stderr，sys.stdout或者文件</span><br><span class="line">- FileHandler：        logging.FileHandler；日志输出到文件</span><br><span class="line">- BaseRotatingHandler：logging.handlers.BaseRotatingHandler；基本的日志回滚方式</span><br><span class="line">- RotatingHandler：    logging.handlers.RotatingHandler；日志回滚方式，支持日志文件最大数量和日志文件回滚</span><br><span class="line">- TimeRotatingHandler：logging.handlers.TimeRotatingHandler；日志回滚方式，在一定时间区域内回滚日志文件</span><br><span class="line">- SocketHandler：      logging.handlers.SocketHandler；远程输出日志到TCP/IP sockets</span><br><span class="line">- DatagramHandler：    logging.handlers.DatagramHandler；远程输出日志到UDP sockets</span><br><span class="line">- SMTPHandler：        logging.handlers.SMTPHandler；远程输出日志到邮件地址</span><br><span class="line">- SysLogHandler：      logging.handlers.SysLogHandler；日志输出到syslog</span><br><span class="line">- NTEventLogHandler：  logging.handlers.NTEventLogHandler；远程输出日志到Windows NT/2000/XP的事件日志</span><br><span class="line">- MemoryHandler：      logging.handlers.MemoryHandler；日志输出到内存中的指定buffer</span><br><span class="line">- HTTPHandler：        logging.handlers.HTTPHandler；通过&quot;GET&quot;或者&quot;POST&quot;远程输出到HTTP服务器</span><br></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">handler1 = logging.FileHandler(&quot;log.txt&quot;)</span><br><span class="line">handler2 = logging.StreamHandler() </span><br><span class="line"># handler2.setLevel(logging.DEBUG) </span><br><span class="line"></span><br><span class="line">formatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)</span><br><span class="line">handler1.setFormatter(formatter)</span><br><span class="line">handler2.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(handler1)</span><br><span class="line">logger.addHandler(handler2)</span><br><span class="line"></span><br><span class="line">logger.info(&quot;Start print log&quot;)</span><br><span class="line">logger.debug(&quot;Do something&quot;)</span><br><span class="line">logger.warning(&quot;Something maybe fail.&quot;)</span><br><span class="line">logger.info(&quot;Finish&quot;)</span><br></pre></td></tr></table></figure><p>运行后，控制台和文件log.txt输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-03-20 17:33:31,349 - __main__ - INFO - Start print log</span><br><span class="line">2019-03-20 17:33:31,349 - __main__ - WARNING - Something maybe fail.</span><br><span class="line">2019-03-20 17:33:31,349 - __main__ - INFO - Finish</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-logging模块简介&quot;&gt;&lt;a href=&quot;#1-logging模块简介&quot; class=&quot;headerlink&quot; title=&quot;1.logging模块简介&quot;&gt;&lt;/a&gt;1.logging模块简介&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;logging模块是Pyth</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>查看log</title>
    <link href="http://yoursite.com/wiki/%E6%9F%A5%E7%9C%8Blog/"/>
    <id>http://yoursite.com/wiki/%E6%9F%A5%E7%9C%8Blog/</id>
    <published>2021-11-06T08:39:40.000Z</published>
    <updated>2021-11-06T13:08:54.929Z</updated>
    
    <content type="html"><![CDATA[<h6 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi/vim"></a>vi/vim</h6><pre><code>vi/vim/关键字  # 向下查找，按n查找下一个?关键字  # 向上查找，按n查找下一个esc     # 退出</code></pre><h6 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h6><pre><code>tail [必要参数] [选择参数] [文件]    -f 循环读取    -q 不显示处理信息    -v 显示详细的处理信息    -c&lt;数目&gt; 显示的字节数    -n&lt;行数&gt; 显示行数Ctrl+c 是退出tail命令</code></pre><p>例如：</p><pre><code>tail -n 100 catalina.out 查询日志尾部最后100行的日志;tail -n +100 catalina.out 查询100行之后的所有日志;tail -fn 100  catalina.out 循环实时查看最后100行记录(最常用的)配合着grep用, 例如 : tail -fn 100 catalina.out | grep   -- &apos;关键字&apos;如果一次性查询的数据量太大,可以进行翻页查看,例如:tail -n 6000  catalina.out |more -100 可以进行多屏显示(ctrl + f 或者 空格键可以快捷键)</code></pre><h6 id="head"><a href="#head" class="headerlink" title="head"></a>head</h6><pre><code>head -n  1000  catalina.out   //查询日志文件中的头10行日志;head -n -1000  catalina.out   //查询日志文件除了最后10行的其他所有日志;</code></pre><h6 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h6><pre><code>cat filename                    // 一次显示整个文件 cat &gt; filename                 //从键盘创建一个文件 cat file1 file2 &gt; file            //将几个文件合并为一个文件,只能创建新文件,不能编辑已有文件.cat -n textfile1 &gt; textfile2 //将一个日志文件的内容追加到另外一个 : cat : &gt;textfile2                // 清空一个日志文件注意：     &gt;意思是创建，       &gt;&gt;是追加。</code></pre><h6 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h6><pre><code>tac 则是由最后一行到第一行反向在萤幕上显示出来</code></pre><h6 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h6><pre><code>sed -n &apos;/2019-01-17 10:07:10/,/2019-02-14 16:54:01/p&apos;</code></pre><h6 id="less"><a href="#less" class="headerlink" title="less"></a>less</h6><pre><code>less log.log shift + G 命令到文件尾部  然后输入 ？加上你要搜索的关键字例如 ？1213shift+n  关键字之间进行切换</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;vi-vim&quot;&gt;&lt;a href=&quot;#vi-vim&quot; class=&quot;headerlink&quot; title=&quot;vi/vim&quot;&gt;&lt;/a&gt;vi/vim&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;vi/vim
/关键字  # 向下查找，按n查找下一个
?关键字  # 向上查找，按n查找下</summary>
      
    
    
    
    <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>删除list中重复元素</title>
    <link href="http://yoursite.com/wiki/%E5%88%A0%E9%99%A4list%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/wiki/%E5%88%A0%E9%99%A4list%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</id>
    <published>2021-11-06T07:47:16.000Z</published>
    <updated>2021-11-06T08:26:30.389Z</updated>
    
    <content type="html"><![CDATA[<h5 id="删除list中重复元素"><a href="#删除list中重复元素" class="headerlink" title="删除list中重复元素"></a>删除list中重复元素</h5><h6 id="使用set（set元素不可重复）"><a href="#使用set（set元素不可重复）" class="headerlink" title="使用set（set元素不可重复）"></a>使用set（set元素不可重复）</h6><pre><code>list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list(set(list)) # [&apos;2&apos;,&apos;1&apos;] list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list(set(list)).sort(key=list.index) # [&apos;1&apos;,&apos;2&apos;]</code></pre><h6 id="使用dict（key不能重复）"><a href="#使用dict（key不能重复）" class="headerlink" title="使用dict（key不能重复）"></a>使用dict（key不能重复）</h6><pre><code>list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list({}.fromkeys(list).keys()) # dict.fromkeys(seq)，创建一个新字典，以seq中的元素做字典的键 # or list({}.fromkeys(list)) # [&apos;1&apos;,&apos;2&apos;]</code></pre><h6 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h6><pre><code>list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list_new = [] for i in list:     if not i in list_new:         list_new.append(i) print(list_new) [list_new.apped(i) for i in list if not i in list_new] print(list_new)</code></pre><h6 id="count计数"><a href="#count计数" class="headerlink" title="count计数"></a>count计数</h6><pre><code>list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] n = 0 while n &lt; len(list):     if list.count(list[n]) &gt; 1:         list.remove(list[n])         continue     n += 1 print(list)</code></pre><h6 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h6><pre><code>from functools import reduce list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list_new = reduce(lambda x,y:x if y in x else x+ [y],[[]] = list) print(list_new)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;删除list中重复元素&quot;&gt;&lt;a href=&quot;#删除list中重复元素&quot; class=&quot;headerlink&quot; title=&quot;删除list中重复元素&quot;&gt;&lt;/a&gt;删除list中重复元素&lt;/h5&gt;&lt;h6 id=&quot;使用set（set元素不可重复）&quot;&gt;&lt;a href=&quot;#使</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>定义</title>
    <link href="http://yoursite.com/wiki/%E5%AE%9A%E4%B9%89/"/>
    <id>http://yoursite.com/wiki/%E5%AE%9A%E4%B9%89/</id>
    <published>2021-11-03T14:26:38.403Z</published>
    <updated>2021-11-06T08:36:45.401Z</updated>
    
    <content type="html"><![CDATA[<h5 id="列表、元组、集合、字典"><a href="#列表、元组、集合、字典" class="headerlink" title="列表、元组、集合、字典"></a>列表、元组、集合、字典</h5><h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><ol><li>列表（list）是<strong>长度可变有序</strong>的数据存储容器，可以通过<strong>下标索引</strong>取到相应的数据。</li><li>元组（tuple）：固定长度不可变的顺序容器，访问率高，适合存储一些常量数据，可以作为字典的键使用。</li><li>集合（set）：无序，元素只出现一次，可以自动去重。</li><li>字典（dict）：长度可变的hash字典容器。存储的方式为键值对，可以通过相应的键获取相应的值，key支持多种类型。key必须是不可变类型且唯一。</li></ol><h6 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h6><ul><li>列表可以修改；用[]表示；不能作为字典的key</li><li>元组不能修改；用()表示；可以作为字典的key；如果仅有一个元素，需要在元素后加逗号</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;列表、元组、集合、字典&quot;&gt;&lt;a href=&quot;#列表、元组、集合、字典&quot; class=&quot;headerlink&quot; title=&quot;列表、元组、集合、字典&quot;&gt;&lt;/a&gt;列表、元组、集合、字典&lt;/h5&gt;&lt;h6 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;head</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>数据转换</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-11-02T13:29:15.116Z</published>
    <updated>2021-11-06T08:37:01.160Z</updated>
    
    <content type="html"><![CDATA[<h5 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h5><h6 id="列表转集合"><a href="#列表转集合" class="headerlink" title="列表转集合"></a>列表转集合</h6><pre><code>list = [1,1,2,3] set(list) # {1,2,3}</code></pre><h6 id="两个列表转字典"><a href="#两个列表转字典" class="headerlink" title="两个列表转字典"></a>两个列表转字典</h6><pre><code>list1 = [&apos;key1&apos;,&apos;key2&apos;] list2 = [&apos;1&apos;,&apos;2&apos;] dict(zip(list1,list2)) # {&apos;key1&apos;:&apos;1&apos;,&apos;key2&apos;:&apos;2&apos;}</code></pre><h6 id="嵌套列表转字典"><a href="#嵌套列表转字典" class="headerlink" title="嵌套列表转字典"></a>嵌套列表转字典</h6><pre><code>list = [[&apos;k1&apos;,&apos;v1&apos;],[&apos;k2&apos;,&apos;v2&apos;]] dict(list) # {&apos;k1&apos;:&apos;vi&apos;,&apos;k2&apos;:&apos;v2&apos;}</code></pre><h6 id="列表转字符串"><a href="#列表转字符串" class="headerlink" title="列表转字符串"></a>列表转字符串</h6><pre><code>list = [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;] &apos;&apos;.join(list) # &apos;123&apos;</code></pre><h6 id="元组转字符串"><a href="#元组转字符串" class="headerlink" title="元组转字符串"></a>元组转字符串</h6><pre><code>tuple = (&apos;1&apos;,&apos;2&apos;,&apos;3&apos;) &apos;&apos;.join(tuple) # &apos;123&apos;</code></pre><h6 id="字典转字符串"><a href="#字典转字符串" class="headerlink" title="字典转字符串"></a>字典转字符串</h6><pre><code>dict = {&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;} str(dict) # &quot;{&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;}&quot;</code></pre><h6 id="字典key，value互转"><a href="#字典key，value互转" class="headerlink" title="字典key，value互转"></a>字典key，value互转</h6><pre><code>dict = {&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;} {value:key for key,value in dict.items()} # {&apos;v1&apos;:&apos;k1&apos;,&apos;v2&apos;:&apos;k2&apos;}</code></pre><h6 id="字符串转列表"><a href="#字符串转列表" class="headerlink" title="字符串转列表"></a>字符串转列表</h6><pre><code>str = &apos;123&apos; list(str) # [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;]</code></pre><h6 id="字符串转元组"><a href="#字符串转元组" class="headerlink" title="字符串转元组"></a>字符串转元组</h6><pre><code>str = &apos;123&apos; tuple(str) # (&apos;1&apos;,&apos;2&apos;,&apos;3&apos;)</code></pre><h6 id="字符串转集合"><a href="#字符串转集合" class="headerlink" title="字符串转集合"></a>字符串转集合</h6><pre><code>str = &apos;123&apos; set(str) # {&apos;1&apos;,&apos;2&apos;,&apos;3&apos;}</code></pre><h6 id="字符串转字典"><a href="#字符串转字典" class="headerlink" title="字符串转字典"></a>字符串转字典</h6><pre><code>str = &quot;{&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;}&quot; eval(str) # {&apos;k1&apos;: &apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;}</code></pre><h6 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h6><pre><code>str = &apos;1,2,3&apos; str.split(&apos;,&apos;) # [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;数据转换&quot;&gt;&lt;a href=&quot;#数据转换&quot; class=&quot;headerlink&quot; title=&quot;数据转换&quot;&gt;&lt;/a&gt;数据转换&lt;/h5&gt;&lt;h6 id=&quot;列表转集合&quot;&gt;&lt;a href=&quot;#列表转集合&quot; class=&quot;headerlink&quot; title=&quot;列表转集合&quot;&gt;</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/wiki/test/"/>
    <id>http://yoursite.com/wiki/test/</id>
    <published>2021-11-02T13:02:03.901Z</published>
    <updated>2021-11-04T13:15:20.272Z</updated>
    
    <content type="html"><![CDATA[<p>12345</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;12345&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="testpage" scheme="http://yoursite.com/tags/testpage/"/>
    
  </entry>
  
</feed>
