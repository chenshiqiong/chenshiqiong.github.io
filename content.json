{"pages":[{"title":"About","date":"2021-11-03T13:37:36.981Z","path":"about/index.html","text":""},{"title":"Categories","date":"2021-11-03T13:37:36.982Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2021-11-03T13:37:36.984Z","path":"tags/index.html","text":""}],"posts":[{"title":"logging","date":"2021-11-07T04:55:34.000Z","path":"wiki/logging/","text":"1.logging模块简介&emsp;&emsp;logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等 2.logging基本使用&emsp;&emsp;配置logging基本的设置（使用logging.basicConfig函数）： filename：指定日志文件名； filemode：和file函数意义相同，指定日志文件的打开模式，’w’或者’a’； datefmt：指定时间格式，同time.strftime()； level：设置日志级别（debug、info、warning、error以及critical），默认为logging.WARNNING； stream：指定将日志的输出流，可以指定输出到sys.stderr，sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略； format：指定输出的格式和内容，format可以输出很多有用的信息：1234567891011- %(levelno)s： 打印日志级别的数值- %(levelname)s： 打印日志级别的名称- %(pathname)s： 打印当前执行程序的路径，其实就是sys.argv[0]- %(filename)s： 打印当前执行程序名- %(funcName)s： 打印日志的当前函数- %(lineno)d： 打印日志的当前行号- %(asctime)s： 打印日志的时间- %(thread)d： 打印线程ID- %(threadName)s：打印线程名称- %(process)d： 打印进程ID- %(message)s： 打印日志信息 例如： 123456789import logginglogging.basicConfig(level = logging.INFO,format = &apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)logger = logging.getLogger(__name__)logger.info(&quot;Start print log&quot;)logger.debug(&quot;Do something&quot;)logger.warning(&quot;Something maybe fail.&quot;)logger.info(&quot;Finish&quot;) 运行后，控制台输出： 1232019-03-20 17:19:05,105 - __main__ - INFO - Start print log2019-03-20 17:19:05,105 - __main__ - WARNING - Something maybe fail.2019-03-20 17:19:05,105 - __main__ - INFO - Finish 3.将日志写入文件&emsp;&emsp;logging中包含的handler主要有如下几种 12345678910111213- AddHandler: logger.addHandler;添加处理方式- StreamHandler： logging.StreamHandler；日志输出到流，可以是sys.stderr，sys.stdout或者文件- FileHandler： logging.FileHandler；日志输出到文件- BaseRotatingHandler：logging.handlers.BaseRotatingHandler；基本的日志回滚方式- RotatingHandler： logging.handlers.RotatingHandler；日志回滚方式，支持日志文件最大数量和日志文件回滚- TimeRotatingHandler：logging.handlers.TimeRotatingHandler；日志回滚方式，在一定时间区域内回滚日志文件- SocketHandler： logging.handlers.SocketHandler；远程输出日志到TCP/IP sockets- DatagramHandler： logging.handlers.DatagramHandler；远程输出日志到UDP sockets- SMTPHandler： logging.handlers.SMTPHandler；远程输出日志到邮件地址- SysLogHandler： logging.handlers.SysLogHandler；日志输出到syslog- NTEventLogHandler： logging.handlers.NTEventLogHandler；远程输出日志到Windows NT/2000/XP的事件日志- MemoryHandler： logging.handlers.MemoryHandler；日志输出到内存中的指定buffer- HTTPHandler： logging.handlers.HTTPHandler；通过&quot;GET&quot;或者&quot;POST&quot;远程输出到HTTP服务器 例如： 1234567891011121314151617181920import logginglogger = logging.getLogger(__name__)logger.setLevel(logging.INFO)handler1 = logging.FileHandler(&quot;log.txt&quot;)handler2 = logging.StreamHandler() # handler2.setLevel(logging.DEBUG) formatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)handler1.setFormatter(formatter)handler2.setFormatter(formatter)logger.addHandler(handler1)logger.addHandler(handler2)logger.info(&quot;Start print log&quot;)logger.debug(&quot;Do something&quot;)logger.warning(&quot;Something maybe fail.&quot;)logger.info(&quot;Finish&quot;) 运行后，控制台和文件log.txt输出： 1232019-03-20 17:33:31,349 - __main__ - INFO - Start print log2019-03-20 17:33:31,349 - __main__ - WARNING - Something maybe fail.2019-03-20 17:33:31,349 - __main__ - INFO - Finish","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"查看log","date":"2021-11-06T08:39:40.000Z","path":"wiki/查看log/","text":"vi/vimvi/vim /关键字 # 向下查找，按n查找下一个 ?关键字 # 向上查找，按n查找下一个 esc # 退出 tailtail [必要参数] [选择参数] [文件] -f 循环读取 -q 不显示处理信息 -v 显示详细的处理信息 -c&lt;数目&gt; 显示的字节数 -n&lt;行数&gt; 显示行数 Ctrl+c 是退出tail命令 例如： tail -n 100 catalina.out 查询日志尾部最后100行的日志; tail -n +100 catalina.out 查询100行之后的所有日志; tail -fn 100 catalina.out 循环实时查看最后100行记录(最常用的) 配合着grep用, 例如 : tail -fn 100 catalina.out | grep -- &apos;关键字&apos; 如果一次性查询的数据量太大,可以进行翻页查看, 例如:tail -n 6000 catalina.out |more -100 可以进行多屏显示(ctrl + f 或者 空格键可以快捷键) headhead -n 1000 catalina.out //查询日志文件中的头10行日志; head -n -1000 catalina.out //查询日志文件除了最后10行的其他所有日志; catcat filename // 一次显示整个文件 cat &gt; filename //从键盘创建一个文件 cat file1 file2 &gt; file //将几个文件合并为一个文件,只能创建新文件,不能编辑已有文件. cat -n textfile1 &gt; textfile2 //将一个日志文件的内容追加到另外一个 : cat : &gt;textfile2 // 清空一个日志文件 注意： &gt;意思是创建， &gt;&gt;是追加。 tactac 则是由最后一行到第一行反向在萤幕上显示出来 sedsed -n &apos;/2019-01-17 10:07:10/,/2019-02-14 16:54:01/p&apos; lessless log.log shift + G 命令到文件尾部 然后输入 ？加上你要搜索的关键字例如 ？1213 shift+n 关键字之间进行切换","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}]},{"title":"删除list中重复元素","date":"2021-11-06T07:47:16.000Z","path":"wiki/删除list中重复元素/","text":"删除list中重复元素使用set（set元素不可重复）list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list(set(list)) # [&apos;2&apos;,&apos;1&apos;] list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list(set(list)).sort(key=list.index) # [&apos;1&apos;,&apos;2&apos;] 使用dict（key不能重复）list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list({}.fromkeys(list).keys()) # dict.fromkeys(seq)，创建一个新字典，以seq中的元素做字典的键 # or list({}.fromkeys(list)) # [&apos;1&apos;,&apos;2&apos;] 列表推导式list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list_new = [] for i in list: if not i in list_new: list_new.append(i) print(list_new) [list_new.apped(i) for i in list if not i in list_new] print(list_new) count计数list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] n = 0 while n &lt; len(list): if list.count(list[n]) &gt; 1: list.remove(list[n]) continue n += 1 print(list) reduce函数from functools import reduce list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list_new = reduce(lambda x,y:x if y in x else x+ [y],[[]] = list) print(list_new)","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"定义","date":"2021-11-03T14:26:38.403Z","path":"wiki/定义/","text":"列表、元组、集合、字典定义 列表（list）是长度可变有序的数据存储容器，可以通过下标索引取到相应的数据。 元组（tuple）：固定长度不可变的顺序容器，访问率高，适合存储一些常量数据，可以作为字典的键使用。 集合（set）：无序，元素只出现一次，可以自动去重。 字典（dict）：长度可变的hash字典容器。存储的方式为键值对，可以通过相应的键获取相应的值，key支持多种类型。key必须是不可变类型且唯一。 区别 列表可以修改；用[]表示；不能作为字典的key 元组不能修改；用()表示；可以作为字典的key；如果仅有一个元素，需要在元素后加逗号","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"数据转换","date":"2021-11-02T13:29:15.116Z","path":"wiki/数据转换/","text":"数据转换列表转集合list = [1,1,2,3] set(list) # {1,2,3} 两个列表转字典list1 = [&apos;key1&apos;,&apos;key2&apos;] list2 = [&apos;1&apos;,&apos;2&apos;] dict(zip(list1,list2)) # {&apos;key1&apos;:&apos;1&apos;,&apos;key2&apos;:&apos;2&apos;} 嵌套列表转字典list = [[&apos;k1&apos;,&apos;v1&apos;],[&apos;k2&apos;,&apos;v2&apos;]] dict(list) # {&apos;k1&apos;:&apos;vi&apos;,&apos;k2&apos;:&apos;v2&apos;} 列表转字符串list = [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;] &apos;&apos;.join(list) # &apos;123&apos; 元组转字符串tuple = (&apos;1&apos;,&apos;2&apos;,&apos;3&apos;) &apos;&apos;.join(tuple) # &apos;123&apos; 字典转字符串dict = {&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;} str(dict) # &quot;{&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;}&quot; 字典key，value互转dict = {&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;} {value:key for key,value in dict.items()} # {&apos;v1&apos;:&apos;k1&apos;,&apos;v2&apos;:&apos;k2&apos;} 字符串转列表str = &apos;123&apos; list(str) # [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;] 字符串转元组str = &apos;123&apos; tuple(str) # (&apos;1&apos;,&apos;2&apos;,&apos;3&apos;) 字符串转集合str = &apos;123&apos; set(str) # {&apos;1&apos;,&apos;2&apos;,&apos;3&apos;} 字符串转字典str = &quot;{&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;}&quot; eval(str) # {&apos;k1&apos;: &apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;} 分割字符串str = &apos;1,2,3&apos; str.split(&apos;,&apos;) # [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;]","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"test","date":"2021-11-02T13:02:03.901Z","path":"wiki/test/","text":"12345","tags":[{"name":"testpage","slug":"testpage","permalink":"http://yoursite.com/tags/testpage/"}],"categories":[]}],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"testpage","slug":"testpage","permalink":"http://yoursite.com/tags/testpage/"}]}