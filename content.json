{"pages":[{"title":"About","date":"2021-11-03T13:37:36.981Z","path":"about/index.html","text":""},{"title":"Categories","date":"2021-11-03T13:37:36.982Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2021-11-03T13:37:36.984Z","path":"tags/index.html","text":""}],"posts":[{"title":"if","date":"2021-11-07T05:07:25.000Z","path":"wiki/if/","text":"Run Keyword If 123$&#123;a&#125; Run Keyword If $&#123;b&#125;==2 Set Variable （结果是）1... ELSE IF $&#123;b&#125;==3 Set Variable （结果是）2... ELSE Set Variable （结果是）3 123456789101112131415161718192021① 数字对比Run Keyword If $&#123;b&#125;==2 keyword... ELSE IF $&#123;b&#125;&lt;2 keyword... ELSE keyword② 字符对比Run Keyword If &quot;$&#123;b&#125;&quot;==&quot;2&quot; keyword... ELSE IF &quot;$&#123;b&#125;&quot;==&quot;12&quot; keyword... ELSE keyword③ 布尔类型对比Run Keyword If &quot;$&#123;b&#125;&quot;==&quot;$&#123;true&#125;&quot; keyword... ELSE IF &quot;$&#123;b&#125;&quot;==&quot;$&#123;false&#125;&quot; keyword... ELSE keyword④ 列表包含元素(多个关键字)Run Keyword If $&#123;a&#125; in @&#123;abc&#125; and &quot;$&#123;b&#125;&quot; in @&#123;anc&#125; keyword... ELSE keyword④ 多个执行语句Run Keyword If $&#123;a&#125;==1 Run Keywords keyword AND keyword1 Run Keyword Unless 1$&#123;a&#125; Run Keyword Unless $&#123;b&#125;==2 Set Variable （结果不是）1 Set Variable If 1$&#123;a&#125; Set Variable If $&#123;b&#125;==2 1 2","tags":[],"categories":[{"name":"robotframework","slug":"robotframework","permalink":"http://yoursite.com/categories/robotframework/"}]},{"title":"字典","date":"2021-11-07T05:06:23.000Z","path":"wiki/字典/","text":"创建字典 1&amp;&#123;dict&#125; Create Dictionary a=1 b=2 c=3 在字典里添加键值 1234567*** Setting ***Library Collections&amp;&#123;dict&#125; Create Dictionary a=1 b=2 c=3$&#123;dict&#125; Set To Dictionary $&#123;dict&#125; d=4(Set To Dictionary $&#123;dict&#125; d=4) 在字典中移除关键字 123456*** Setting ***Library Collections&amp;&#123;dict&#125; Create Dictionary a=1 b=2 c=3Remove From Dictionary $&#123;dict&#125; c 获取字典中key的值 123456*** Setting ***Library Collections&amp;&#123;dict&#125; Create Dictionary a=1 b=2 c=3$&#123;a&#125; Get From Dictionary $&#123;dict&#125; a","tags":[],"categories":[{"name":"robotframework","slug":"robotframework","permalink":"http://yoursite.com/categories/robotframework/"}]},{"title":"常用关键字","date":"2021-11-07T05:04:04.000Z","path":"wiki/常用关键字/","text":"打印 1Log helloworld 变量 1$&#123;a&#125; Set Variable helloworld 列表 12345$&#123;a&#125; Create List a b cLog $&#123;a&#125;@&#123;a&#125; Create List a b cLog Many @&#123;a&#125; 字典 1&amp;&#123;a&#125; Create Dictionary a=1 b=2 5.","tags":[],"categories":[{"name":"robotframework","slug":"robotframework","permalink":"http://yoursite.com/categories/robotframework/"}]},{"title":"json","date":"2021-11-07T05:01:20.000Z","path":"wiki/json/","text":"1.json的介绍&emsp;&emsp;JSON全称是(JavaScript Object Notation)是一种轻量级的数据格式。Python标准库中的json模块提供了JSON数据的处理功能。&emsp;&emsp;json模块常用的四个方法： dumps、dump、loads、load 2.dumps&emsp;&emsp;json.dumps方法可以将Python对象（即字典）转换为一个表示JONS数据的字符串.&emsp;&emsp;在默认实现中, json.dumps可以处理的Python对象, 及其所有的属性值, 类型必须为dict, list, tuple, str, float或者int&emsp;&emsp;它的完整接口签名如下: 1json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw) 1234obj：要转换的数据对象ensure_ascii：用来控制生成的JSON字符串的编码；默认为True, 此时, 所有的非ASCII码字条都会转义. False会保持原有编码, 限UTF-8check_circular：检查Python对象中是否有循环引用, 如果发现了循环引用, 就会抛出异常indent：用来控制JSON字符串的换行和缩进效果；①为0或者负数时, JSON字符会包含换行；②为正整数时, 除了换行, JSON还会以指定数量的空格为单位在对象层次间进行缩进；③是str, 此时, JSON会以str内容为单位进行缩进, 比如制表符\\t 例如： 123456789101112131415import jsonprint(json.dumps(1))print(type(json.dumps(1)))print(json.dumps(&quot;1&quot;))print(type(json.dumps(&quot;1&quot;)))print(json.dumps(&quot;中文&quot;))print(type(json.dumps(&quot;中文&quot;)))dict = &#123;&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:23,&apos;b&apos;: &#123;&apos;x&apos;: 321, &apos;y&apos;: &apos;ABC&apos;&#125;&#125;print(json.dumps(dict))print(type(json.dumps(dict)))print(json.dumps(dict,indent=-1))print(json.dumps(dict,indent=4))print(json.dumps(dict,indent=&apos;\\t&apos;)) 返回执行结果： 12345678910111213141516171819202122232425262728293031321&lt;class &apos;str&apos;&gt;&quot;1&quot;&lt;class &apos;str&apos;&gt;&quot;\\u4e2d\\u6587&quot;&lt;class &apos;str&apos;&gt;&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 23, &quot;b&quot;: &#123;&quot;x&quot;: 321, &quot;y&quot;: &quot;ABC&quot;&#125;&#125;&lt;class &apos;str&apos;&gt;&#123;&quot;name&quot;: &quot;Tom&quot;,&quot;age&quot;: 23,&quot;b&quot;: &#123;&quot;x&quot;: 321,&quot;y&quot;: &quot;ABC&quot;&#125;&#125;&#123; &quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 23, &quot;b&quot;: &#123; &quot;x&quot;: 321, &quot;y&quot;: &quot;ABC&quot; &#125;&#125;&#123; &quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 23, &quot;b&quot;: &#123; &quot;x&quot;: 321, &quot;y&quot;: &quot;ABC&quot; &#125;&#125; 3.dump&emsp;&emsp;当JSON数据是保存在一个文件中的时候, json.load方法可以用来从这个文件中读取数据, 并转换为Python对象。 1json.dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True,allow_nan=True,cls=None, indent=None, separators=None,default=None, sort_keys=False, **kw) 例如：1234import jsonwith open(&apos;test.json&apos;, mode=&apos;a&apos;) as f: json.dump(&#123;&apos;a&apos;:1234&#125;,f) 4.loads&emsp;&emsp;json.loads方法可以将包含了一个JSON数据的str, bytes或者bytearray对象, 转化为一个Python Dictionary.&emsp;&emsp;它的完型接口签名如下: 1json.loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw) 例如： 12345678import jsondict = &#123;&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:23,&apos;b&apos;: &#123;&apos;x&apos;: 321, &apos;y&apos;: &apos;ABC&apos;&#125;&#125;print(json.dumps(dict))print(type(json.dumps(dict)))print(json.loads(json.dumps(dict)))print(type(json.loads(json.dumps(dict)))) 执行结果： 1234&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 23, &quot;b&quot;: &#123;&quot;x&quot;: 321, &quot;y&quot;: &quot;ABC&quot;&#125;&#125;&lt;class &apos;str&apos;&gt;&#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 23, &apos;b&apos;: &#123;&apos;x&apos;: 321, &apos;y&apos;: &apos;ABC&apos;&#125;&#125;&lt;class &apos;dict&apos;&gt; 5.load&emsp;&emsp;当JSON数据是保存在一个文件中的时候, json.load方法可以用来从这个文件中读取数据, 并转换为Python对象。 1json.load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"正则基础","date":"2021-11-07T05:00:13.000Z","path":"wiki/正则基础/","text":"1.字符组 ： [字符组]&emsp;&emsp;在同一个位置可能出现的各种字符组成了一个字符组，在正则表达式中用[]表示 字符分为很多类，比如数字、字母、标点等等。 1234561 [1] 匹配12 [123] 匹配1、2、33 [0-9] 匹配任意一个数字4 [a-z] 匹配任意一个小写字母5 [A-Z] 匹配任意一个大写字母6 [A-Za-z] 匹配任意一个字母 示例： 1234567print(re.findall(&apos;[1]&apos;,&apos;Zll5201314&apos;)) #[&apos;1&apos;, &apos;1&apos;]print(re.findall(&apos;[123]&apos;,&apos;Zll5201314&apos;)) #[&apos;2&apos;, &apos;1&apos;, &apos;3&apos;, &apos;1&apos;]print(re.findall(&apos;[0-9]&apos;,&apos;Zll5201314&apos;)) #[&apos;5&apos;, &apos;2&apos;, &apos;0&apos;, &apos;1&apos;, &apos;3&apos;, &apos;1&apos;, &apos;4&apos;]print(re.findall(&apos;[a-z]&apos;,&apos;Zll5201314&apos;)) #[&apos;l&apos;, &apos;l&apos;]print(re.findall(&apos;[A-Z]&apos;,&apos;Zll5201314&apos;)) #[&apos;Z&apos;]print(re.findall(&apos;[a-zA-Z]&apos;,&apos;Zll5201314&apos;)) #[&apos;Z&apos;, &apos;l&apos;, &apos;l&apos;]print(re.findall(&apos;[A-Za-z0-3]&apos;,&apos;Zll5201314&apos;)) #[&apos;Z&apos;, &apos;l&apos;, &apos;l&apos;, &apos;2&apos;, &apos;0&apos;, &apos;1&apos;, &apos;3&apos;, &apos;1&apos;] 2.元字符1234567891011121314. 匹配除换行符以外的任意字符\\w 匹配字母或者数字或者下划线\\s 匹配任意空白字符\\d 匹配数字\\n 匹配换行符\\t 匹配制表符tab\\b 匹配一个单词的结尾^ 匹配字符串的开始$ 匹配字符串的结尾\\W 匹配非字母或下划线或数字\\D 匹配非数字\\S 匹配非空白符| 匹配|前或者后的内容() 匹配括号内的表达式，也表示一个组 示例： 123456789101112print(re.findall(&apos;.&apos;,&apos;love_u 520&apos;)) #[&apos;l&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;u&apos;, &apos; &apos;, &apos;5&apos;, &apos;2&apos;, &apos;0&apos;]print(re.findall(&apos;\\w&apos;,&apos;love_u 520&apos;)) #[&apos;l&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;u&apos;, &apos;5&apos;, &apos;2&apos;, &apos;0&apos;]print(re.findall(&apos;\\s&apos;,&apos;love_u 520&apos;)) #[&apos; &apos;]print(re.findall(&apos;\\d&apos;,&apos;love_u 520&apos;)) #[&apos;5&apos;, &apos;2&apos;, &apos;0&apos;]print(re.findall(&apos;\\n&apos;,&apos;love_u 520&apos;)) #[]print(re.findall(&apos;\\b&apos;,&apos;love_u 520&apos;)) #[]print(re.findall(&apos;^l&apos;,&apos;love_u 520&apos;)) #[&apos;l&apos;]print(re.findall(&apos;520$&apos;,&apos;love_u 520&apos;)) #[&apos;520&apos;]print(re.findall(&apos;\\W&apos;,&apos;love_u 520&apos;)) #[&apos; &apos;]print(re.findall(&apos;\\D&apos;,&apos;love_u 520&apos;)) #[&apos;l&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;u&apos;, &apos; &apos;]print(re.findall(&apos;\\S&apos;,&apos;love_u 520&apos;)) #[&apos;l&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;u&apos;, &apos;5&apos;, &apos;2&apos;, &apos;0&apos;]print(re.findall(&apos;love|u&apos;,&apos;love_u 520&apos;)) #[&apos;love&apos;, &apos;u&apos;] 3.量词1234561 * 重复零次或者多次 2 + 重复1次或者多次3 ? 重复零次或者一次4 &#123;n&#125; 重复n次5 &#123;n,&#125; 重复n次或者更多次6 &#123;n,m&#125; 重复n到m次 示例： 1234561 print(re.findall(&apos;5*&apos;,&apos;555 5&apos;)) #[&apos;555&apos;, &apos;&apos;, &apos;5&apos;, &apos;&apos;]2 print(re.findall(&apos;5+&apos;,&apos;555 5&apos;)) #[&apos;555&apos;, &apos;5&apos;]3 print(re.findall(&apos;5?&apos;,&apos;555 5&apos;)) #[&apos;5&apos;, &apos;5&apos;, &apos;5&apos;, &apos;&apos;, &apos;5&apos;, &apos;&apos;]4 print(re.findall(&apos;5&#123;2,3&#125;&apos;,&apos;555 5&apos;)) #[&apos;555&apos;]5 print(re.findall(&apos;5&#123;2&#125;&apos;,&apos;555 5&apos;)) #[&apos;55&apos;]6 print(re.findall(&apos;5&#123;3&#125;&apos;,&apos;555 5&apos;)) #[&apos;555&apos;] 4.常见的正则表达式应用1234567891011手机号（国内）：^[1-9][3478]\\d&#123;9&#125;电话号（国内）：[0-9-()（）]&#123;7,18&#125;邮 编：\\d&#123;6&#125;Q Q：[1-9]([0-9]&#123;5,11&#125;)身 份 证 号：\\d&#123;17&#125;[\\d|x]|\\d&#123;15&#125;邮 箱：\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]&#123;2,14&#125;网 址：^((https|http|ftp|rtsp|mms)?:\\/\\/)[^\\s]+日 期：\\d&#123;4&#125;(\\-|\\/|.)\\d&#123;1,2&#125;\\1\\d&#123;1,2&#125;用 户 名：[A-Za-z0-9_\\-\\u4e00-\\u9fa5]+#正则表达式在线测试网址“http://tool.chinaz.com/regex/”","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"re","date":"2021-11-07T04:58:53.000Z","path":"wiki/re/","text":"1.re简介&emsp;&emsp;re模块是python中处理正则表达式的一个模块。&emsp;&emsp;re常用方法有findall()、finditer()、search()、match()、split()、sub()、subn()、compile() 2.findall()方法&emsp;&emsp;findall(pattern, string, flags=0)，从字符串中找出符合模式的字符序列，返回值为list类型，list元素为匹配出的各个字符串。例如： 12345678910import rea = re.findall(&apos;a&apos;,&apos;abac&apos;)print(a)b = &quot;AbCdEf&quot;x = re.findall(&apos;c&apos;,b)y = re.findall(&apos;c&apos;, b, re.I)print(x)print(y) 执行结果： 123[&apos;a&apos;, &apos;a&apos;][][&apos;C&apos;] 3.finditer()方法&emsp;&emsp;finditer(pattern, string, flags=0),执行与findall()相同的操作，但返回一个生产器。例如： 1234567import reret = re.finditer(&apos;\\d&apos;, &apos;ds3sy4784a&apos;) #finditer返回一个存放匹配结果的迭代器print(ret) # &lt;callable_iterator object at 0x10195f940&gt;print(next(ret).group()) #查看第一个结果print(next(ret).group()) #查看第二个结果print([i.group() for i in ret]) #查看剩余的左右结果 执行结果： 1234&lt;callable_iterator object at 0x0000025B7AB82F28&gt;34[&apos;7&apos;, &apos;8&apos;, &apos;4&apos;] 4.search()方法&emsp;&emsp;search(pattern, string, flags=0)，在整个字符串中查找满足匹配条件的字符或者字符串，一旦找到一个就不再继续查找，并返回包含查找值的对象（match对象），可以用.group()方法进行查看。例如： 1234567import rea = re.search(&apos;a&apos;,&apos;Abac&apos;)print(a.group())b = re.search(&apos;a&apos;,&apos;Abac&apos;,re.I)print(b.group()) 执行结果： 12aA 5.match()方法&emsp;&emsp;match(pattern, string, flags=0)，从开头位置查找是否满足匹配条件，如果没有就会返回None，如果有，则会返回一个包含查找值的对象（match对象），可以用group()方法进行查看。例如： 1234567import rea = re.match(&apos;a&apos;,&apos;Abac&apos;)print(a)a = re.match(&apos;a&apos;,&apos;Abac&apos;,re.I)print(a.group()) 执行结果： 12NoneA 6.split()方法&emsp;&emsp;split(pattern,string,maxsplit=0,flags=0)，根据正则匹配分割字符串。例如： 1234import rea = re.split(&apos;a&apos;,&apos;Abac&apos;)print(a) 执行结果： 1[&apos;Ab&apos;, &apos;c&apos;] 7.sub()方法&emsp;&emsp;sub(pattern,repl,string,count=0,flags=0)，替换匹配成功的指定位置字符串。例如： 1234567import rea = re.sub(&apos;b&apos;,&apos;B&apos;,&apos;Abac&apos;)print(a)b = re.sub(&apos;a&apos;,&apos;A&apos;,&apos;abac&apos;,1)print(b) 执行结果： 12ABacAbac 8.subn()方法&emsp;&emsp;subn(pattern, repl, string, count=0, flags=0),执行与sub()相同的操作，但返回一个元组（new_string， number_of_subs_made)。例如： 1234import rea = re.subn(&apos;a&apos;,&apos;A&apos;,&apos;abac&apos;,1)print(a) 执行结果： 1(&apos;Abac&apos;, 1) 9.compile()方法&emsp;&emsp;compile(pattern, flags=0)，将正则表达式模式编译成一个正则表达式对象，它可以用于匹配使用它的match ()和search ()方法。例如： 12345import rex = re.compile(&apos;a&apos;)a = x.search(&apos;Abac&apos;)print(a.group()) 执行结果： 1a","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"logging","date":"2021-11-07T04:55:34.000Z","path":"wiki/logging/","text":"1.logging模块简介&emsp;&emsp;logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等 2.logging基本使用&emsp;&emsp;配置logging基本的设置（使用logging.basicConfig函数）： filename：指定日志文件名； filemode：和file函数意义相同，指定日志文件的打开模式，’w’或者’a’； datefmt：指定时间格式，同time.strftime()； level：设置日志级别（debug、info、warning、error以及critical），默认为logging.WARNNING； stream：指定将日志的输出流，可以指定输出到sys.stderr，sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略； format：指定输出的格式和内容，format可以输出很多有用的信息：1234567891011- %(levelno)s： 打印日志级别的数值- %(levelname)s： 打印日志级别的名称- %(pathname)s： 打印当前执行程序的路径，其实就是sys.argv[0]- %(filename)s： 打印当前执行程序名- %(funcName)s： 打印日志的当前函数- %(lineno)d： 打印日志的当前行号- %(asctime)s： 打印日志的时间- %(thread)d： 打印线程ID- %(threadName)s：打印线程名称- %(process)d： 打印进程ID- %(message)s： 打印日志信息 例如： 123456789import logginglogging.basicConfig(level = logging.INFO,format = &apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)logger = logging.getLogger(__name__)logger.info(&quot;Start print log&quot;)logger.debug(&quot;Do something&quot;)logger.warning(&quot;Something maybe fail.&quot;)logger.info(&quot;Finish&quot;) 运行后，控制台输出： 1232019-03-20 17:19:05,105 - __main__ - INFO - Start print log2019-03-20 17:19:05,105 - __main__ - WARNING - Something maybe fail.2019-03-20 17:19:05,105 - __main__ - INFO - Finish 3.将日志写入文件&emsp;&emsp;logging中包含的handler主要有如下几种 12345678910111213- AddHandler: logger.addHandler;添加处理方式- StreamHandler： logging.StreamHandler；日志输出到流，可以是sys.stderr，sys.stdout或者文件- FileHandler： logging.FileHandler；日志输出到文件- BaseRotatingHandler：logging.handlers.BaseRotatingHandler；基本的日志回滚方式- RotatingHandler： logging.handlers.RotatingHandler；日志回滚方式，支持日志文件最大数量和日志文件回滚- TimeRotatingHandler：logging.handlers.TimeRotatingHandler；日志回滚方式，在一定时间区域内回滚日志文件- SocketHandler： logging.handlers.SocketHandler；远程输出日志到TCP/IP sockets- DatagramHandler： logging.handlers.DatagramHandler；远程输出日志到UDP sockets- SMTPHandler： logging.handlers.SMTPHandler；远程输出日志到邮件地址- SysLogHandler： logging.handlers.SysLogHandler；日志输出到syslog- NTEventLogHandler： logging.handlers.NTEventLogHandler；远程输出日志到Windows NT/2000/XP的事件日志- MemoryHandler： logging.handlers.MemoryHandler；日志输出到内存中的指定buffer- HTTPHandler： logging.handlers.HTTPHandler；通过&quot;GET&quot;或者&quot;POST&quot;远程输出到HTTP服务器 例如： 1234567891011121314151617181920import logginglogger = logging.getLogger(__name__)logger.setLevel(logging.INFO)handler1 = logging.FileHandler(&quot;log.txt&quot;)handler2 = logging.StreamHandler() # handler2.setLevel(logging.DEBUG) formatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)handler1.setFormatter(formatter)handler2.setFormatter(formatter)logger.addHandler(handler1)logger.addHandler(handler2)logger.info(&quot;Start print log&quot;)logger.debug(&quot;Do something&quot;)logger.warning(&quot;Something maybe fail.&quot;)logger.info(&quot;Finish&quot;) 运行后，控制台和文件log.txt输出： 1232019-03-20 17:33:31,349 - __main__ - INFO - Start print log2019-03-20 17:33:31,349 - __main__ - WARNING - Something maybe fail.2019-03-20 17:33:31,349 - __main__ - INFO - Finish","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"查看log","date":"2021-11-06T08:39:40.000Z","path":"wiki/查看log/","text":"vi/vimvi/vim /关键字 # 向下查找，按n查找下一个 ?关键字 # 向上查找，按n查找下一个 esc # 退出 tailtail [必要参数] [选择参数] [文件] -f 循环读取 -q 不显示处理信息 -v 显示详细的处理信息 -c&lt;数目&gt; 显示的字节数 -n&lt;行数&gt; 显示行数 Ctrl+c 是退出tail命令 例如： tail -n 100 catalina.out 查询日志尾部最后100行的日志; tail -n +100 catalina.out 查询100行之后的所有日志; tail -fn 100 catalina.out 循环实时查看最后100行记录(最常用的) 配合着grep用, 例如 : tail -fn 100 catalina.out | grep -- &apos;关键字&apos; 如果一次性查询的数据量太大,可以进行翻页查看, 例如:tail -n 6000 catalina.out |more -100 可以进行多屏显示(ctrl + f 或者 空格键可以快捷键) headhead -n 1000 catalina.out //查询日志文件中的头10行日志; head -n -1000 catalina.out //查询日志文件除了最后10行的其他所有日志; catcat filename // 一次显示整个文件 cat &gt; filename //从键盘创建一个文件 cat file1 file2 &gt; file //将几个文件合并为一个文件,只能创建新文件,不能编辑已有文件. cat -n textfile1 &gt; textfile2 //将一个日志文件的内容追加到另外一个 : cat : &gt;textfile2 // 清空一个日志文件 注意： &gt;意思是创建， &gt;&gt;是追加。 tactac 则是由最后一行到第一行反向在萤幕上显示出来 sedsed -n &apos;/2019-01-17 10:07:10/,/2019-02-14 16:54:01/p&apos; lessless log.log shift + G 命令到文件尾部 然后输入 ？加上你要搜索的关键字例如 ？1213 shift+n 关键字之间进行切换","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}]},{"title":"删除list中重复元素","date":"2021-11-06T07:47:16.000Z","path":"wiki/删除list中重复元素/","text":"删除list中重复元素使用set（set元素不可重复）list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list(set(list)) # [&apos;2&apos;,&apos;1&apos;] list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list(set(list)).sort(key=list.index) # [&apos;1&apos;,&apos;2&apos;] 使用dict（key不能重复）list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list({}.fromkeys(list).keys()) # dict.fromkeys(seq)，创建一个新字典，以seq中的元素做字典的键 # or list({}.fromkeys(list)) # [&apos;1&apos;,&apos;2&apos;] 列表推导式list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list_new = [] for i in list: if not i in list_new: list_new.append(i) print(list_new) [list_new.apped(i) for i in list if not i in list_new] print(list_new) count计数list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] n = 0 while n &lt; len(list): if list.count(list[n]) &gt; 1: list.remove(list[n]) continue n += 1 print(list) reduce函数from functools import reduce list = [&apos;1&apos;,&apos;1&apos;,&apos;2&apos;] list_new = reduce(lambda x,y:x if y in x else x+ [y],[[]] = list) print(list_new)","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"定义","date":"2021-11-03T14:26:38.403Z","path":"wiki/定义/","text":"列表、元组、集合、字典定义 列表（list）是长度可变有序的数据存储容器，可以通过下标索引取到相应的数据。 元组（tuple）：固定长度不可变的顺序容器，访问率高，适合存储一些常量数据，可以作为字典的键使用。 集合（set）：无序，元素只出现一次，可以自动去重。 字典（dict）：长度可变的hash字典容器。存储的方式为键值对，可以通过相应的键获取相应的值，key支持多种类型。key必须是不可变类型且唯一。 区别 列表可以修改；用[]表示；不能作为字典的key 元组不能修改；用()表示；可以作为字典的key；如果仅有一个元素，需要在元素后加逗号","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"数据转换","date":"2021-11-02T13:29:15.116Z","path":"wiki/数据转换/","text":"数据转换列表转集合list = [1,1,2,3] set(list) # {1,2,3} 两个列表转字典list1 = [&apos;key1&apos;,&apos;key2&apos;] list2 = [&apos;1&apos;,&apos;2&apos;] dict(zip(list1,list2)) # {&apos;key1&apos;:&apos;1&apos;,&apos;key2&apos;:&apos;2&apos;} 嵌套列表转字典list = [[&apos;k1&apos;,&apos;v1&apos;],[&apos;k2&apos;,&apos;v2&apos;]] dict(list) # {&apos;k1&apos;:&apos;vi&apos;,&apos;k2&apos;:&apos;v2&apos;} 列表转字符串list = [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;] &apos;&apos;.join(list) # &apos;123&apos; 元组转字符串tuple = (&apos;1&apos;,&apos;2&apos;,&apos;3&apos;) &apos;&apos;.join(tuple) # &apos;123&apos; 字典转字符串dict = {&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;} str(dict) # &quot;{&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;}&quot; 字典key，value互转dict = {&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;} {value:key for key,value in dict.items()} # {&apos;v1&apos;:&apos;k1&apos;,&apos;v2&apos;:&apos;k2&apos;} 字符串转列表str = &apos;123&apos; list(str) # [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;] 字符串转元组str = &apos;123&apos; tuple(str) # (&apos;1&apos;,&apos;2&apos;,&apos;3&apos;) 字符串转集合str = &apos;123&apos; set(str) # {&apos;1&apos;,&apos;2&apos;,&apos;3&apos;} 字符串转字典str = &quot;{&apos;k1&apos;:&apos;v1&apos;,&apos;k2&apos;:&apos;v2&apos;}&quot; eval(str) # {&apos;k1&apos;: &apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;} 分割字符串str = &apos;1,2,3&apos; str.split(&apos;,&apos;) # [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;]","tags":[],"categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"数据类型","slug":"python/数据类型","permalink":"http://yoursite.com/categories/python/数据类型/"}]},{"title":"test","date":"2021-11-02T13:02:03.901Z","path":"wiki/test/","text":"12345","tags":[{"name":"testpage","slug":"testpage","permalink":"http://yoursite.com/tags/testpage/"}],"categories":[]}],"categories":[{"name":"robotframework","slug":"robotframework","permalink":"http://yoursite.com/categories/robotframework/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"},{"name":"数据类型","slug":"python/数据类型","permalink":"http://yoursite.com/categories/python/数据类型/"}],"tags":[{"name":"testpage","slug":"testpage","permalink":"http://yoursite.com/tags/testpage/"}]}